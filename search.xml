<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Hexo+GitHub同步托管到coding上的方法]]></title>
      <url>http://yoursite.com/2016/08/15/Hexo+GitHub%E5%90%8C%E6%AD%A5%E6%89%98%E7%AE%A1%E5%88%B0coding%E4%B8%8A%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前我们已经将hexo托管到GitHub上去了，但是毕竟是国外的。访问速度很慢，因此，我就想也部署到国内的托管平台。其中，coding是很好的一个选择。看过很多人写的博客，自己就总结一下部署的方法，该方法可以在本地一次更新后，同时更新到GitHub和coding上，话不多说看干货。<br><a id="more"></a></p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="注册、登录CODING账号。"><a href="#注册、登录CODING账号。" class="headerlink" title="注册、登录CODING账号。"></a>注册、登录<a href="https://coding.net/" target="_blank" rel="external">CODING</a>账号。</h2><p>这画风我喜欢^_^。<br><img src="http://oby863yl6.bkt.clouddn.com/coding_1.png" alt=""></p>
<h2 id="新建一个项目"><a href="#新建一个项目" class="headerlink" title="新建一个项目"></a>新建一个项目</h2><p><img src="http://oby863yl6.bkt.clouddn.com/coding_2.png" alt=""><br>点击完“添加项目”完之后，填写项目名称和项目描述，完成之后点击“创建项目”。</p>
<h2 id="SSH公钥配置"><a href="#SSH公钥配置" class="headerlink" title="SSH公钥配置"></a>SSH公钥配置</h2><p>这里的公钥就是之前配置到GitHub里面的公钥，我们直接将.ssh文件夹中的id_rsa.pub文件中数据全选，复制就好。然后coding页面中，点击“账户—&gt;SSH公钥”，粘贴刚刚复制的公钥，然后点击“添加”即可。<br><img src="http://oby863yl6.bkt.clouddn.com/coding_3.png" alt=""></p>
<h2 id="config-yml配置"><a href="#config-yml配置" class="headerlink" title="_config.yml配置"></a>_config.yml配置</h2><p>想要同时部署到两个平台，就要修改博客根目录E:\Hexo下面的_config.yml文件内容，我们只需要修改deploy下面的内容就好了，将原来的内容修改为一下形式：<br><img src="http://oby863yl6.bkt.clouddn.com/coding_4.png" alt=""><br>关于coding：后面的访问地址，我们只需要选中刚才所创建的项目，然后点击“代码”，在页面的左下方选中“SSH”，然后直接复制该地址就行了。<br><img src="http://oby863yl6.bkt.clouddn.com/coding_5.png" alt=""><br>添加完之后，在git bash命令窗口输入以下指令：<br><code>ssh -T git@git.coding.net</code><br><img src="http://oby863yl6.bkt.clouddn.com/coding_6.png" alt=""><br>提示输入（yes/no）？，输入yes，完工。</p>
<h2 id="同步本地Hexo到coding上"><a href="#同步本地Hexo到coding上" class="headerlink" title="同步本地Hexo到coding上"></a>同步本地Hexo到coding上</h2><p>It’s easy! 一条指令的干活。</p>
<p><code>hexo depoly -g</code><br><img src="http://oby863yl6.bkt.clouddn.com/coding_7.png" alt=""><br>红色框框的内容便是我们同步到coding上的内容了。<br>怎么还没到啊，宝宝等不及啦！心急吃不了热馍馍。最后一步！！！</p>
<h2 id="pages服务方式部署"><a href="#pages服务方式部署" class="headerlink" title="pages服务方式部署"></a>pages服务方式部署</h2><p>部署博客这里我们采用pages服务的方式，因为可以绑定域名。（虽然我还没有域名-_-!）pages方式也很简单，就是在source文件夹下创建一个空白文件，因为coding.net需要这个文件夹作为以静态文件部署的标志。看到这个Staticfile就知道按照静态文件来发布。具体操作看下面指令：</p>
<p><code>cd source</code><br><code>touch Staticfile  #名字必须是Staticfile</code><br><img src="http://oby863yl6.bkt.clouddn.com/coding_8.png" alt=""><br>在本项目中，选中“代码–&gt;Pages服务”，在部署分支中填写master，因为在配置文件中我们写的master，然后点击“立即开启”，收工！<br><img src="http://oby863yl6.bkt.clouddn.com/coding_9.png" alt=""><br>接下里你就可以访问自己的博客了。访问地址为<code>xxx.coding.me</code>。<br><img src="http://oby863yl6.bkt.clouddn.com/coding_10.png" alt=""><br>注意：如果你的项目名称跟你的coding的用户名一致时，例如：我的coding用户名为iechoes，同时，我的博客项目名称也是iechoes。那么直接访问<code>iechoes.coding.me</code>就可以访问博客了。否则就需要带上项目名称名才能访问，即：<code>iechoes.coding.me/项目名称</code><br>推荐第一种方式哦，这样可以偷懒。嘻嘻。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基于Hexo+GitHub的个人博客创建方法]]></title>
      <url>http://yoursite.com/2016/08/14/%E5%9F%BA%E4%BA%8EHexo-GitHub%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h1><p>首先我们来关注一下博客搭建所需要的系统环境：Git和Node.js。其中，</p>
<ul>
<li>Git：把把本地的hexo内容提交到github上去</li>
<li>Node.js：用来创建hexo博客的框架<a id="more"></a>
<h2 id="Git的安装"><a href="#Git的安装" class="headerlink" title="Git的安装"></a>Git的安装</h2>Windows环境只需要前往Git官网下载并且安装<a href="https://git-scm.com/downloads" target="_blank" rel="external">Git</a>。<h2 id="Node-js的安装"><a href="#Node-js的安装" class="headerlink" title="Node.js的安装"></a>Node.js的安装</h2>可以采用<a href="https://github.com/creationix/nvm" target="_blank" rel="external">nvm</a>进行安装，但是这里我采用的应用程序安装，直接去官方网站下载<a href="https://nodejs.org/en/download/" target="_blank" rel="external">Node.js</a>的安装包，然后一路next就可以了。</li>
</ul>
<h1 id="Hexo的安装"><a href="#Hexo的安装" class="headerlink" title="Hexo的安装"></a>Hexo的安装</h1><ul>
<li>当上述环境安装好之后，在你喜爱的盘下建立一个文件夹（如：E:\Hexo），然后在该文件夹下:右击–&gt;点击“Git Bash Here”，打开Git Bash，执行以下指令：<br><code>npm install –g hexo</code><br><img src="http://oby863yl6.bkt.clouddn.com/building_1.png" alt=""></li>
<li>安装完之后执行以下指令，Hexo就会自动在目标文件夹建立网站所需要的所有文件：<br><code>hexo init</code><br><img src="http://oby863yl6.bkt.clouddn.com/building_2.png" alt=""></li>
<li>安装依赖包<br><code>npm install</code><br><img src="http://oby863yl6.bkt.clouddn.com/building_3.png" alt=""></li>
<li>此时网站就创建完毕了，我们可以通过以下方法启动本地服务器来查看网站。<br><code>hexo server</code><br><img src="http://oby863yl6.bkt.clouddn.com/building_4.png" alt=""><br>然后用浏览器访问<a href="http://localhost:4000/。按照道理此时应该有一个漂亮的博客出现在的面前，但是，但是，但是，它就是不讲道理，这才是它的给我的真是反应。" target="_blank" rel="external">http://localhost:4000/。按照道理此时应该有一个漂亮的博客出现在的面前，但是，但是，但是，它就是不讲道理，这才是它的给我的真是反应。</a><br><img src="http://oby863yl6.bkt.clouddn.com/building_5.png" alt=""></li>
</ul>
<p>此时，此时我的内心是不平静的。Why? Why? Why? 转瞬向度娘求救。我就很二五地问：“为什么localhost:4000打不开”。天下问题，无独有偶。<br>有人说，“端口被占用”。What! What! What! 神马时候4000被占用了，有种被自己买了，还不知道什么时候被卖了的感觉。既然有人说问题出在端口被占用上，那就自然而然想到要改端口号了，怎么改，指令告诉你。<br><code>hexo server –p 5000</code><br>端口号4000不行，我5000可以吧。<br><img src="http://oby863yl6.bkt.clouddn.com/building_6.png" alt=""><br>就是酱紫，实验检验真理的唯一标准，啥也不说，我们来访问<a href="http://localhost:5000/。你猜猜结果咋样，恭喜你，答对了。（虽然我不知道你答的是啥！假设你是对的，我们接着往下走。）还是来张皂片吧。界面还是蛮好看的。" target="_blank" rel="external">http://localhost:5000/。你猜猜结果咋样，恭喜你，答对了。（虽然我不知道你答的是啥！假设你是对的，我们接着往下走。）还是来张皂片吧。界面还是蛮好看的。</a><br><img src="http://oby863yl6.bkt.clouddn.com/building_7.png" alt=""></p>
<ul>
<li>注册GitHub的账号</li>
<li>创建repository<br>Repository相当于一个仓库，用来放置你的代码文件。首先登陆GitHub，并进入个人主页，然后创建一个repository。创建时，只需要在Repository name处填写即可。当然这个名字必须为yourname.github.io(如：ieachoes.github.io)，然后点击“Create repository”即可。<br><img src="http://oby863yl6.bkt.clouddn.com/building_8.png" alt=""></li>
<li>部署SSH<br>既然repository已经创建好了，当然是先把博客放到GitHub上面看看咯。编辑E:\Hexo下的_config.yml文件。在该文件的最下方，添加如下配置并保存。<br><img src="http://oby863yl6.bkt.clouddn.com/building_9.png" alt=""><br>注意：每一个：之后都要添加一个空格，repository：之后为之前创建的repository链接。如果是第一次使用GitHub或者已经使用过了，但是没有配置过SSH，则接下来需要先配置一下，在Git Bash输入指令：<br><code>ls –al ~/.ssh</code><br><img src="http://oby863yl6.bkt.clouddn.com/building_10.png" alt=""><br>如果不存在.ssh文件夹就没有关系，如果存在的话，直接删除.ssh文件夹中的所有文件。以下是.ssh文件夹中的文件。<br><img src="http://oby863yl6.bkt.clouddn.com/building_11.png" alt=""><br>输入以下指令（邮箱是当初你注册GitHub时候的邮箱），回车，出现提示让你输入的时候直接先回车，需要三次。<br><code>ssh-keygen –t rsa –C “xxxx@163.com”</code><br><img src="http://oby863yl6.bkt.clouddn.com/building_12.png" alt=""><br>然后输入以下指令：<br><code>ssh-agent –s</code><br><img src="http://oby863yl6.bkt.clouddn.com/building_13.png" alt=""><br>继续输入指令:<br><code>ssh-add  ~/.ssh/id_rsa</code><br><img src="http://oby863yl6.bkt.clouddn.com/building_14.png" alt=""><br>哎呀！出错了。如果你也出错了，莫方，分别输入以下指令：<br>  eval <code>ssh-agent –s</code><br>  ssh-add<br><img src="http://oby863yl6.bkt.clouddn.com/building_15.png" alt=""><br>到了这一步，你就离曙光不远啦！现在可以添加SSH  Key到你的GitHub账户中去了。直接进入.ssh文件夹目录：C:\Users\Administrator.ssh，使用记事本打开id_rsa.pub文件，将该文件中的内容进行复制,然后到GitHub里面，点击右上角的设置图标Settings。<br><img src="http://oby863yl6.bkt.clouddn.com/building_16.png" alt=""><br>找到SSH and GPG Keys，然后点击New SSH Key，Title里面可以随便写，Key里面填写的就是刚才在id_rsa.pub中拷贝的内容，然后点击Add SSH Key。<br><img src="http://oby863yl6.bkt.clouddn.com/building_17.png" alt=""><br><img src="http://oby863yl6.bkt.clouddn.com/building_18.png" alt=""><br>最后我们还是测试一下吧！输入以下指令：<br><code>ssh -T git@github.com</code><br><img src="http://oby863yl6.bkt.clouddn.com/building_19.png" alt=""><br>你会看到一个警告，不过没关系，输入yes就好啦！^_^Y至此部署到GitHub就已经完工啦！</li>
<li>Hexo部署<br>由于使用Git部署，在部署网站之前需安装hexo-deployer-git，只需要在hexo目录下执行以下指令：<br><code>npm install hexo-deployer-git –-save</code><br><img src="http://oby863yl6.bkt.clouddn.com/building_20.png" alt=""><br>安装好之后，执行以下指令就可以完成Hexo部署啦，有木有点小激动！！<br><code>hexo d</code><br>至此，恭喜你顺利完成部署Hexo，接下来你就可以登陆yourname.github.io查看你的网站啦。<br><img src="http://oby863yl6.bkt.clouddn.com/building_21.png" alt=""></li>
<li><p>配置本地用户和邮箱<br>用户名邮箱的作用：我们需要设置一个用户名和邮箱，这是用来上传本地仓库到GitHub中，在GitHub中显示代码上传者，使用如下指令进行配置：</p>
<p>  git config –global user.name “iechoes”<br>  git config –global user.email “xxxx@163.com”</p>
</li>
</ul>
<p><img src="http://oby863yl6.bkt.clouddn.com/building_22.png" alt=""><br>到这里Git客户端已安装及GitHub配置完成，现在可以从GitHub传输代码了。</p>
<h1 id="博文的撰写"><a href="#博文的撰写" class="headerlink" title="博文的撰写"></a>博文的撰写</h1><ul>
<li>在Git Bash命令窗口执行以下命令，new后面为博文文件的文件名，不一定是博文的标题:<br><code>hexo new helloworld</code></li>
<li>在E:\Hexo\source_post中打开helloworld.md，打开方式使用记事本或者其他工具。Hexo中写文章使用的事Markdown，这里推荐一种工具，markdownpad，Markdown编写语法可以百度一下。需要注意的是，在直接将文件放入目录中时，请在markdown文件内容前加上以下内容，以帮助解析。<br>  title: xxx  # 后面接标题<br>  date: xxxx-xx-xx  # 发表日期，一般不改动<br>  categories: xx  # 文章文类<br>  tags: [xx, xx, xx]  # 文章标签，多于一项时用tags: blog<br>以下书写正文。<br>关于博文的编写工具，在这里我推荐用MarkdownPad进行书写（直接点击链接便可以下载，下载时选择免费的）。<br><img src="http://oby863yl6.bkt.clouddn.com/building_23.png" alt=""><br>但是在Win10系统下面，该软件不能顺利使用。别方，这是因为升级到Win10系统之后，MarkdownPad2遇到html渲染错误的问题。此时Win10系统需要下载一个<a href="http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe" target="_blank" rel="external">awesomium_v1.6.6_sdk_win</a>。下载安装后正常渲染。</li>
<li>前面已经提及，Hexo是静态博客框架，所以写完文章后需要对所有文章进行静态化处理，即生成相应的网页文件。静态化页面的生成只需要一步就可以完成：<br><code>hexo g</code></li>
<li>生成好静态网页文件后，接下来就是同步到GitHub上去了，同样滴，也是一条指令的事：<br><code>hexo d</code><br>至此，各位小伙伴便可以顺利撰写并上传自己的博文。感谢您的耐心阅读。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello, world!]]></title>
      <url>http://yoursite.com/2016/08/14/happy/</url>
      <content type="html"><![CDATA[<p>人生中的第一篇博客，花了半天的时间将博客搭建好。第一篇博文想不到取什么名字好，就想直接用编程世界中最经典的句子来命名：hello world。你好，博客新世界。一直以来想创建自己的个人博客，始终因为这因为那搁置不前。今天心一横，参考网上各种教程，顺利完成大家，同时自己也顺手写下了自己搭建的过程，后面也会分享给大家。在此感谢教程编写者们的奉献。<br>以此博文，记录成长。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=32507038&auto=1&height=66"></iframe>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2016/08/14/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
